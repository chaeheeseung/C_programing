함수의 장점은 뭐가 있을까

함수를 모듈처럼 사용할 수 있는 장점이 있지

<예제 8-1>
#include <stdio.h>

int SumTwo(int a, int b);

int main(void)
{
	int x = 10, y = 5;
	int value;

	value = SumTwo(x, y);

	printf("두 수의 합 : %d\n", value);

	return 0;
}
int SumTwo(int a, int b)
{
	int result;
	result = a + b;
	return result;
}

코드는 짧은데 생각보다 복잡하네

그러게 코드가 짧다고 쉽다고 생각할게 아니구나

<실수 2개를 입력받아 평균 출력하기>
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
float Average(float x, float y);
int main(void)
{
	float num1, num2, result;
	printf("num1 입력: ");
	scanf("%f", &num1);
	printf("num2 입력: ");
	scanf("%f", &num2);

	result = Average(num1, num2);

	printf("두 수의 평균 : %f", result);

	return 0;
}
float Average(float num1, float num2)
{
	float result;
	result = (num1 + num2) / 2;
	return result;
}

이런 코드를 이용하면 초중고 시험 점수를 쉽게 산출 해낼 수 있을 것 같아

평균 계산할 때 직접 계산해서 했는데 숫자만 입력하면 알아서 평균을 구해주니까 편할 것 같네

<함수의 유용성>
#include <stdio.h>

int integral(int start, int end);
int main(void)
{
	int result = 0, i;

	printf("함수를 사용하지 않고 합을 구함\n");
	for (i = 1; i <= 10; i++)
		result += i;

	printf("1부터 10까지 합은 %d다.\n", result);
	result = 0;
	for (i = 7; i <= 17; i++)
		result += i;
	printf("7부터 17까지 합은 %d다.\n", result);
	printf("*************************\n");
	printf("함수를 사용하여 합을 구함\n");
	printf("1부터 10까지 합은 %d다.\n", integral(1, 10));
	printf("7부터 17까지 합은 %d다.\n", integral(7, 17));

	return 0;
}
int integral(int start, int end)
{
	int sum = 0, i;
	for (i = start; i <= end; i++)
		sum += i;
	return sum;
}

반복적인 작업이 함수를 통해서 간편화 됐어

만약 함수를 이용하지 않았다면 코드가 엄청 길어졌겠다

그 뿐만이 아니라 훨씬 복잡해졌을거야

<예제 8-5 소문자를 입력받아 대문자로 변환하기>
#include <stdio.h>

void upper_case(char ch);
int main(void)
{
	char ch1, ch2;
	while ((ch1 = getchar()) != EOF) {
		upper_case(ch1);
	}
	return 0;
}

void upper_case(char ch)
{
	char res;
	if (ch >= 'a' && ch <= 'z')
		res = ch - 32;
	else
		res = ch;
	putchar(res);
}

반대로 대문자에서 소문자로 바꿔보고 싶었는데 생각보다 잘 안되네

나중에 시간을 더 들여서 해보면 분명 성공할거야

<예제 8-6>
#include <stdio.h>

int SumArray(int Array[ ], int Size); // 함수 정의

int main(void)
{
int a[ ] = {10, 5, 15, 25, 7};
int Sum;
Sum = SumArray(a, 5); // 함수 호출
printf("배열 원소의 합 : %d\n", Sum);
return 0;
}

int SumArray(int Array[ ], int Size) // 함수 정의
{
int result = 0, i;
for(i = 0; i < Size; i + +)
result += Array[i];

return result;
}

<예제 8-7>
#include <stdio.h>

int factorial(int n);
int main(void)
{
	int fact_num;
	fact_num = factorial(10);
	printf("10 팩토리얼 : %d\n", fact_num);
	return 0;
}

int factorial(int n)
{
	if (n <= 1)
		return(1);
	else
		return(n * factorial(n - 1));
}

<예제 8-8>
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int sum(int a);
int main(void)
{
	int input, s = 0;
	printf("양의 정수를 입력하세요 : ");
	scanf("%d", &input);

	s = sum(input);
	printf("재귀함수를 이용한 1부터 %d까지 합 : %d\n", input, s);
	return 0;
}

int sum(int a)
{
	if (a <= 1)
		return 1;
	else
		return a + sum(a - 1);
}

<p. 265. 11번 문제>
#include <stdio.h>

int max(int num[]);
int min(int num[]);

int main(void)
{
	int a[] = { 20, 34, 12, 24, 54, 91, 9, 40, 81, 10 };
	int result1, result2;
	result1 = max(a);
	result2 = min(a);
	printf("최대값 : %d\n", result1);
	printf("최소값 : %d", result2);
	return 0;
}

int max(int num[])
{
	int result = 20, i;
	for (i = 0; i < 10; i++)
	{
		if (result < num[i])
			result = num[i];
	}
	return result;
}
int min(int num[])
{
	int result = 20, i;
	for (i = 0; i < 10; i++)
	{
		if (result > num[i])
			result = num[i];
	}
	return result;
}

주어진 숫자에서 최대값하고 최소값 구하는 코드만 해도 이렇게 복잡하고 긴데 평균하고 표준편차도 구하는 코드까지 추가하게 된다면 훨씬 복잡해지겠다

그러게 지금도 이렇게 긴데 더 길어지고 복잡해지면 지금은 하기 힘들어도 나중에 더 배우게 된다면 할 수 있겠지
